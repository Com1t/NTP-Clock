#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
#define DHTPIN 2     // Digital pin connected to the DHT sensor 
#define DHTTYPE    DHT22     // DHT 22 (AM2302)
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

DHT_Unified dht(DHTPIN, DHTTYPE);

uint64_t i = 0;
uint32_t delayMS;

const unsigned char PROGMEM ime [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0xC0, 0x1F, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xDF, 0x00, 0x07, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x30, 0x02, 0xF0, 0x00,
  0x00, 0x1F, 0x01, 0xF0, 0x38, 0x38, 0x7F, 0xE3, 0xFF, 0xC0, 0xFF, 0xFF, 0xFE, 0x00, 0xF0, 0x00,
  0x00, 0xFF, 0x87, 0xFC, 0x3C, 0x78, 0x7F, 0xE7, 0xFF, 0x80, 0xFE, 0x7F, 0xFF, 0xC0, 0x78, 0x00,
  0x01, 0xFF, 0x8F, 0xFC, 0x7C, 0xF8, 0xFF, 0xC7, 0xFF, 0x80, 0x7F, 0xF0, 0xFF, 0xFF, 0x7C, 0x00,
  0x03, 0xE0, 0x1E, 0x1E, 0x7C, 0xF8, 0xE0, 0x00, 0x70, 0x00, 0x3F, 0xE0, 0x0F, 0xFF, 0xFC, 0x00,
  0x07, 0x80, 0x1C, 0x0E, 0x6D, 0xF8, 0xE0, 0x00, 0x70, 0x00, 0x0F, 0xE0, 0x00, 0x7F, 0xFF, 0xE0,
  0x07, 0x80, 0x38, 0x0E, 0x6D, 0xB8, 0xE0, 0x00, 0x70, 0x00, 0x03, 0xF0, 0x00, 0x07, 0xFF, 0xF8,
  0x07, 0x00, 0x38, 0x0E, 0xEF, 0x30, 0xFF, 0x80, 0x70, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x1F, 0xFC,
  0x0F, 0x00, 0x38, 0x0E, 0xCF, 0x31, 0xFF, 0x80, 0xF0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x1F, 0xFE,
  0x0E, 0x00, 0x38, 0x1C, 0xCE, 0x31, 0xFF, 0x80, 0xE0, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x1F, 0xFC,
  0x0E, 0x00, 0x70, 0x1C, 0xCE, 0x71, 0xC0, 0x00, 0xE0, 0x00, 0x03, 0xF0, 0x00, 0x00, 0xFF, 0xFC,
  0x0E, 0x00, 0x70, 0x3D, 0xC0, 0x71, 0xC0, 0x00, 0xE0, 0x00, 0x0F, 0xE0, 0x00, 0x3F, 0xFF, 0xE0,
  0x0F, 0x00, 0x78, 0x79, 0x80, 0x63, 0x80, 0x00, 0xE0, 0x00, 0x1F, 0xE0, 0x01, 0xFF, 0xFF, 0x00,
  0x07, 0xFE, 0x3F, 0xF1, 0x80, 0x63, 0xFE, 0x01, 0xC0, 0x00, 0x7F, 0xF0, 0xFF, 0xFF, 0xFC, 0x00,
  0x07, 0xFE, 0x3F, 0xE3, 0x80, 0x63, 0xFF, 0x01, 0xC0, 0x00, 0xFF, 0x7F, 0xFF, 0xFC, 0x78, 0x00,
  0x01, 0xFC, 0x0F, 0xC3, 0x80, 0xE3, 0xFF, 0x01, 0xC0, 0x00, 0xFE, 0xFF, 0xFE, 0x40, 0xF8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x07, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1F, 0xC0, 0x0F, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x7F, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup()   {
  
  dht.begin();
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  // Set delay between sensor readings based on sensor details.
  delayMS = sensor.min_delay / 1000;
  // Delay between measurements.
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)
  // init done
  display.clearDisplay();
  display.drawBitmap(0, 0,  ime, 128, 32, 1);
  display.display();
  delay(700);
  display.clearDisplay();
  display.display();
  
  delay(delayMS - 700);
}
void loop()
{
  String upperLine, lowerLine;
  
  // Get temperature event and print its value.
  sensors_event_t event;
  if( i%2 == 0 ){
    dht.temperature().getEvent(&event);
    if (isnan(event.temperature)) {
      upperLine = "Error reading temp!";
      lowerLine = "ERROR!";
    }
    else {
      upperLine = "Temperature(";
      upperLine += (char)247;
      upperLine += "C)";
      lowerLine = event.temperature;
    }
  }
  else{
    // Get humidity event and print its value.
    dht.humidity().getEvent(&event);
    if (isnan(event.relative_humidity)) {
      upperLine = "Error reading Humi!";
      lowerLine = "ERROR!";
    }
    else {
      upperLine = "Humidity(%): ";
      lowerLine = event.relative_humidity;
    }
  }
  
  display.clearDisplay();
  display.setFont();
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.print(upperLine);

  display.setFont(&FreeSans12pt7b);

  display.setCursor(65, 30);
  display.print(lowerLine);
  display.display();
  i ++;
  // Delay between measurements.
  delay(delayMS);
}
